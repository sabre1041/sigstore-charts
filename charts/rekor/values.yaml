namespace:
  create: false
  name: rekor-system
imagePullSecrets:

initContainerImage:
  curl:
    registry: docker.io
    repository: curlimages/curl
    # 7.79.1
    version: sha256:1a2209a10a11295c3ab6952d1278a9ea2ce0d20e33fdeaeb24d7a4586767c825
    imagePullPolicy: IfNotPresent

redis:
  enabled: true
  replicaCount: 1
  hostname: ""
  port: 6379
  args:
    - --bind
    - 0.0.0.0
    - --appendonly
    - "yes"
  name: redis
  image:
    registry: docker.io
    repository: redis
    pullPolicy: IfNotPresent
    # 5.0.10
    version: "sha256:0a0d563fd6fe5361316dd53f7f0a244656675054302567230e85eb114f683db4"
  resources: {}
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
    exec:
      command:
        - /bin/sh
        - -i
        - -c
        - test "$(redis-cli -h 127.0.0.1 ping)" = "PONG"
  service:
    type: ClusterIP
    ports:
      - name: 6379-tcp
        port: 6379
        protocol: TCP
        targetPort: 6379
  serviceAccount:
    create: true
    name:
    annotations: {}

server:
  enabled: true
  replicaCount: 1
  name: server
  port: 3000
  image:
    registry: gcr.io
    repository: projectsigstore/rekor-server
    pullPolicy: IfNotPresent
    # v0.5.0
    version: "sha256:516651575db19412c94d4260349a84a9c30b37b5d2635232fba669262c5cbfa6"
  logging:
    production: false
  ingress:
    enabled: true
    annotations: {}
    path: /
    tls: {}
  service:
    type: ClusterIP
    ports:
      - name: 3000-tcp
        port: 3000
        protocol: TCP
        targetPort: 3000
      - name: 2112-tcp
        port: 2112
        protocol: TCP
        targetPort: 2112
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      port: 3000
      path: /ping
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      port: 3000
      path: /ping
  attestation_storage:
    enabled: true
    bucket: file:///var/run/attestations
    persistence:
      enabled: true
      annotations: {}
      storageClass: null
      size: 5Gi
      mountPath: /var/lib/mysql
      subPath: ""
      existingClaim: ""
      accessModes:
        - ReadWriteOnce
  deploymentAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "2112"
  resources: {}
  extraArgs: []
  serviceAccount:
    create: true
    name:
    annotations: {}
# Configure Trillian dependency
trillian:
  enabled: true
  namespace:
    name: trillian-system
    create: true
  forceNamespace: trillian-system
  fullnameOverride: trillian
  logServer:
    name: trillian-logserver
    fullnameOverride: trillian-logserver
    portHTTP: 8090
    portRPC: 8091
  logSigner:
    name: trillian-logsigner
    fullnameOverride: trillian-logsigner
  mysql:
    fullnameOverride: trillian-mysql

# Force namespace of namespaced resources
forceNamespace: null
